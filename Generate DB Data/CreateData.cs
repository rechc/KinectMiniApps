using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Transactions;
using Database;

namespace Generate_DB_Data
{
    class CreateData
    {
        private Model1Container _context;
        private readonly Random _random = new Random();

        public CreateData(int entryCount)
        {
            using (var con = new Model1Container())
            {
                _context = con;
                Flush_DB();
                CreateCountryEntries();
                SaveChanges();

                for (int i = 0; i < entryCount; i++)
                {
                    CreateTravelOffer(i);
                }
                SaveChanges();
            }
        }

        private void CreateCountryEntries()
        {
            string[] countries = {"Spanien", "Deutschland", "USA", "Mallorca", "Frankreich"};
            foreach (var countryName in countries)
            {
                var c = new Country() {CountryName = countryName};
                _context.CountrySet.Add(c);
            }
        }

        private void CreateTravelOffer(int i)
        {
            string[] travelType = {"Flugzeug", "Boot", "Busfahrt"};
            //todo change picture to real picture
            byte[] img = StringToByteArray("89504E470D0A1A0A0000000D494844520000005C0000005C08020000006C8D450F000000017352474200AECE1CE90000000467414D410000B18F0BFC6105000000097048597300000EC300000EC301C76FA8640000001974455874536F667477617265005061696E742E4E45542076332E352E38373B805D000013FF49444154785EE59C67771449D285F3CFEF879D77771983F742C821E4BDF70809E41D327884370302663FEE9379BB43A9ACEE566324BD033A718EAAABCB64DEBA71233232ABDDCECEC76FB70F1F760ADAFBF71FCCFE7CFFC1DB9FEFCDDEBDFBF38B2C3E974BC51767BB581BBEA277EEC3CEC76FB1F71F760A5A0E0201F1FEC3BB3FDFCBDEBEFB33B6376FDF9569C98976C1E446051BF3A51D74C5002E677FF2ACF471CFF304884087B76FDF99BD79F3D6ECF5EB37E5587C0ADB7629235A72D36CC3CAE98E1DE38A3DEA7DF7278F28618491C288F0FACD5BD9ABD76FCC5EBE7A5DA6D929761DBBB291C8E8C346B679FBF6C80E70059FF6BE3B9327C3C7581DF4247DA303298C0BAF5EBDC65EBE7C257B81BD78297BFEFC45D6EC5BBF913F4B17C174D91C89F24C8C9B916DE4BEFDD201AEE0032FBD337E2059A588A99130C2A3F0F2D5732078F1F2D9F317B2A7CF9E97363B920D4ED4453C468165BA85E8539A3B6A6A39FD755938F7DD93848CAC58E819C6BC303AF81E0A85A7CFB0EDEDA7664F9E6CC7167FC5B68EE75C4C9CD235453A7FAF983891EED0BCA4C1FB76D0651F7BE93DC5C24722193CC32C2FC0621B209E3E7BB2FD147BFC641B7BF4F84969D36198CEE274314B0C32EE94439C82EA93EDAFFBA24C210E225E35F27124AB1ABBD408CF56A4F0BDA27B8F9F608F1E3DC61E3E7C247B803D78985AFEDB87E160B0F3E70642C5DCF1C49136196B12C5D94B9C2C7712105CF2E44B7F8C738A2C35B2EC88A961A4A0871E82878FEE3F7878EFFE03D9DD7BF7B366DF7224C6299CEB010AD0883B31714AB026561CF5A2444F5DF2F04B7C4C928558381453627648353C3B44FE400DCF08BA272040E1EE3D6C6BEBAE6C13DBDCDAB5FCFEAD701890710AE78A4DE20E97156B3C3441714C6E76B526CF9ADD50952778B1CEBA32134AE345926BC893E39822879770881DA28678213AD04F0FC1D6DD8DCDADF58D4DD99DF58DD86C3FC7603ADE03043AF71F1871C49A586E4A688DC5A9245A2520B8E4F917FB18E79D9629E4D28D7C9621EDD82548C28E400DCF083A090AEB1BD89D3BEB6BD8DA1D6C155B5DDBB5B013E3188C8339CBA3B3B9C545B8941107DAC4AC8983541AA122D6EC4973A2241B045C4281821FE31C946D634742108B2C3141C40E5143BC800E00317E63B2B3A7EFDAF5A6BAFA46ACB3BB776CFCC6E2D2F2D2F20A367DEB7647574F7B67771D075C6FC4DABB7A46C76F2CAFAC720511A7046B2434052963A94D9CE024BD76E50C3DFCF9F93CD223924F467D1A96CF3B3C22F9E022F9F0FE12B14370408481A191EADAEBBDFD43F38B4B1644E616167BFA062F5DA96E6A696F6C696F686EE35B20B003D81E1C1EABACBED6DDDB6FC4F1ACD9973296D46472E21C2E99F1974B5850ECA38D5092ECA3848218418C1D9353B72E56548D8CDD78F1EAD55FFFFD6FD62800ACE1531B9B9FFFFAABE0011F7676C0AEA3AB175F0362634D22345995511A1DA7C2715E93F4DA19054A6CD868250931BB094826BE7844827C4838E8C3CAEA1A2C58DFD8A2BBDF629F3FFFD5D8DC3E7D6B06D2E1864083D6E04DBB2A9391982430591E9C4B85F34E6008B87206A936DC88872DA5438C1444F2012290BFA76FA06F60E85BE0B073171697DB3ABBF12F8036CA98CA64035392CB64075009082E6641B1ED642C5B22CA785995A64A504340595E5E41232BAED69058E216DFFEC7D8187CB92040AFAC70071FA1A0A402D39EA8B43703CE0E9D62D658F7DD8B17245DA5ECF973D4D4DBB3678CE55E3C7D4ADC7DBEBDFDECC993A78F1F6F3F7AF4E4E1C3C70F1E3CBA7F1F597DE0A3CCE65D2F227736BCCBACACA1964800CABAB5750FE67F472364D4D537F50F0E43C3D5D53B50727DDD07266E74F7AECF6568156DA385B493D6D2668CC6AB23D6AF6CF79D3CA2842563FC783817276689ACCA6540A4B5BD6B68649C22C57784C32E850B13B0A66FCF702F5C292731212415CBF19437C4434A8D2A637305AB3BF14E512E1EE96B50E7E32EA9AAD2766522212BF3F998E7C8EAD2D2726777DFC8D8C4E783FC9B9D5B0077C2374E1A1C69D78FC045C38238BBF3C3A5BD85081B1C58AF5D5CC2C96E5BF92719F227C9BBE5663E130981068ECCCD2F5CAEACA6987190987CFEF4E9534353EBF8C4A4C725C0E2FD28C423E34B32924C4A1096E659F79D8850CC4410CBDC638EF8F42C3FAE83AFCADC3D4782B22E2E2EF5F60DA0AF078A882E0E0A0DCDAD0B0B8B70D374D7C7691FA80B8F0672C3C80C6584832B5D0A2C58134A06783C10E5EF34CE23B2B2CA439B5F5824FB7CFAFCF9A7CF9F0FDA3E7EFA74BDA9756070380FCBAEB8882FD901649CDDC52A23349C761534D12C2E91A99C110F796D4463F9881061E4D23730FCE913F43E0CA349E72F55DEBA3D530C17AF2F452A32E64D068253A02A6884311921CDA2AF05E090B3FA00BCB1B1B51B8097561616962626267D56F2E6EDE120A2BB4C4DDF6E6DEBE479E4C46595E485817814A4EF3D206F88E3B442B52C46C0191DB21B561C550D35EB3571DA2A71154D1A5BDAD840020FF36F6767A7E65AC3E4CD6991251F8BFCF8A8E0905A15BCB8886708B8A4861E7FCC16532D005B652437B40952425B50BBB1F10986B9870987DD6B666EBEA5ADC393251F8ABCBA640747F2A33044522146153C336774C86E184192AA6A364F134D78448461467DD40110BFC3371E7565751D6DC8924525186574B1EE267C1108AEC4F482C96A5C64CE1604E288333B375F5D57CF5D3F7EFC742476F14A15720B594C7193224392EC5A0A63E80088636850CCD054C9AA0D6D72A31BD5D0D6A3010EFABAB8343FBF383B3B5F515943543B1244B8697D63CBD8D80D4F9685A5A5A5A02C362CDAA09449853C8C8CF2A22BDD95190E4E74C89A6621C411AB3967AB8A314D68CAED99D90B972A190DEF7CFC7824D6DD3BD0D73F086115864236B75B5EC8D63115A7650682B3E9A864C3E6A588EF71E66A65E75CE9288CFAB83FAD989D9D9B9C9CAAB85AFB15EB64BED7290C852865D212DAE33D48396E182BE614776FDDDBE64C34449239C329D910416CBEAA60F1D96822899D999D1B1C1A696EEDF85E3DFC8AEB901C5DB87C7564749CF658CE52822C125D9B6C1308CE76251BC9DC5DD671AC38E0D56461916783EFB475748D8EDD206538C23FC871ADA199F624614885857832C044D7429240702479050D2992214B9825AFD2D7B5B575046C7999DCC4A7B09258EA3DA7CF5F66C6EE0811E1D638C295AA3ADAB32BB7CBA1DAB2C6FC51C871F38A6BA2AB9E1A0ECE18916CD8CC2E7016A4499CC2CA77AAEBAE538BA7E07EB4367D7BB6B1B995F6980799DC2664B14C579D35045CC1996D2988C191CC63A962A2C25AEC3B4C5F30A6FAA2D565077130334A4CADE1CB8A41B450F9AD94A5202EEAA941E1E41D59835A3262BB467DB1E3507C4D7C874654D5D6DF59DF3C887E7ED1359BDB3AFB07863D28B3F3F8752E61C183569893651E768F132973911908CE18916C68425B1C89A73BAD68A2E19FC51D1A41823F3139C584D6D15A755D03D187F6C883C4140D1155C78DC96253F7722599B3CE271BC2C25605680647459338122BEE707B92EBDEFE8196B6CE3217DB1DD0612CDD3A7BA162F2E614EDA155C53CC87051308A173680C3D783120B8A40B9313975EE5225CD3AA00E9773D9CDAD7B648FCCCF27A01853242BFB806238251BC9B2918426B1EF2843A11153D3B72AABEAE014A81CD51FD329540F6809ED91D6663D28C645998BCC1070286841435665C4762526CA4D4C621717A99EF844163DF3A0DCF2A03436B751AC3E2A449839209D6540383D1D983233675A4B6BFDF830925B29AE321799E1E00CA764235E54548C26088A0725620A5A3B343A8E031D89ADACDDA19E72736A3A618A05E6824E643D35045CB2A8CA3E0A0883C3F455C57A8B3B525998821BD31A84967AF5BE0B550FE88099D9051248541650688F0250ACB502C57216F323498C9913850A9A5C465E638EA3F444BEE3B37B409999BB7DDB83323575ABB76F9071070BEC0EA8DBA52FDBD6D1DDD1D9E34199BA853BD32A1F95E71694AD98079913296D91C508B89811C9B65F84168C186C29AC49ACF98E428F98428358ABD53F34022A876C2CAC3E73A162646C3CCB14E5FB71C222B228C795C57D77B637BBA1D3048792FA828858E801941B9337295CC3E1A9E9992F5AB6FCED076F6CDEBD505135716312506889A2B2A57080520C97181A81E0E41AC58C58A37023AFD9759CBCC4CA77147A6EDE9CA6C8C4A40F59DCE52BD52BAB77BEBDABE55FA1776088D8E741990CA01080F0A090EC9B07659D481D4CBAEF8C0ED90D11C46862FA2AD41577CC770085470453681664696BEFBC5C5943CACC7A5F22E541FFB1DAABAAA67E941BE7996201485A6B1E644E64A26BAE6408B8B8E7C9B6FC452EA370A331718C48EC3B028576D1B691D1B186A616326EC224DE7E70C6B40677B95A53D7DDDBC77D01853698AC98076571B1E5A9313A42E06B400175A3490950864746CF5CB8BC75EFFEC121C29599A63979F622F78226DF0D14A343B2217614E388A5278A3B5E5082CAF2A0600AED832943C323172BAE2E2EAF96BFFCFF4B8F64F9517D434B6D7D23A0704740E1EE628A52B8586E8D2C525CF99159DC7D177F91A0A0336397318228618B11A11D4244BE432B01A5B9B5FDD4D98B2C07667692D721BFEF1F61E22C75AD9A6B8343C3DC8B9BF23068807990C5A0C489A42F064D1620673D4F20D069920FF317234816119358A3096D1D181CEAEEE9BD5A5DD7D4DACE64D0773416209F397F19D9EA1F18E42E80129345B8185912BE883232EB668C919B27318D6C6E1E14F6183329D8CC2C8186811F042155237F95D790B01174701C6862123B3E3CE27D0750FA078608CFBF1E3FC3CAA932DF8C28F330967AD65C6B6C6A6913284CAD0C0D7B0F1A1D9B608D3FABBD1227A2C1345BED575FD4AFA4B382C2D95E1D9498CE8FE1082E4356221D8911F191189A04444645135ACC22AFCAAADAAB35D76ECDCC014D39EF479473CCDAFAE6E973973A591AD43F00F42C630A6419A3E6265C6227A29D3438E0924263E8C41D07149F6E640DD530C359E42F12115356C5E0C471A426812683B4B8B7AF9F9CE5D295AAAADAEB94CB5917FCEDB67A67FDD81FA7EBEA1B7A7AFB02287B3C486128111789AEFC4812A364579674DFC59DCF0261582470689863E1461C317D359AD0E2DA6B0DBF9D383B3A3E59CEEB22651EC364381003347003BA7091DC4A590AE292488C4113A323049C308B4D58C6BC1035147763382CDC1443A4AAF6DAE90B97A968F166F577FFA39AF5EB8933ACFC0097BCB214C5C52446D024C489E903142E86C0E8603E926011FB8BA26F098E74F5F4FE71F21C53B3BC8E7540C64C0D155956EB9A1315E48BB952161A4327762E17E288CC471333C44946700986B3F81013A28CF21192345292D86B46103C648FC510E82B2F75B1CEAB9C5767BEE518DE32686AED40CB0BE262BA4B8369368D0F2238A54E05E2FB3EC61D070797452102C2C7DA601E8BE02C84981C1CC1652CD6786555B809E23AD0D3DB7FFEE295A95B33E5BC3AF38DC73CDE7E8AEE76F7EC8A2E8D5190CEC7A35C480A8FD34313D0F15DCB3FF21C3AC2C8DD0C4A3119D90D48116C022C94B92B550DFE324AC20A1C845E1279059AE1910162CD2E22FDC4C9AEDEBE7FFF76926530BC727F08861391B398E8D2189A44C36821D24B5369304F91C6D30BCF9AD02975D0FA6B2038B66CAF6744DE745A0E0B8633060729FC5E38720421250901983049165B5BDF50515557CECB44DFE598D68E6E266DB9350DA0197D0383395C8A4153081D03C829D1B074035E28A6988E4A4A155F2CE82A13018EC865FA85484B5B3BE340F8CC108B9F67389C3FAAE51595D53C0CE1820BC71263EA6B015B315BA6CEAAE34AF99C7DD07725B0B0AC2C8143191A0D229B62F8C71295E1D189C7DBDBFC62C5A1192FD0514060B95D734B1BB81834689C456B4163B98CD2992C3A20E0A43D924F0594605E44032FBCA158811A62878F2F4150739A8A33438D7FFD7AA2EE7A3303873DBF0493FFCD9843D8C9DB3A631393BF9F384B846EE32D66B9122F2EF67B5C3414C80B704E83830C6B64E09558E303CC857F0242F1351753F258308AF17070C5E029311CFD64AB274E9F67F80E351E3E7EB2EF4B66877000CDC0958086F717785A04C13C343EEB0DD0081DDFA9F0B07D845290928183B368E27961223A328A747B831A8A2C8343A897F794E02CD4EB7F3F79EE6A6D3D2F7CF2F32EFFDF8CF77846272699F1C0A7AE3534110D73029CD7E0588615A47C9C0ADD070727F994824A3524A2B17028FBC0E024459D5F8F9FA6DEB5BAB6BEEFAB76477E0083605E3BFAEDF8199ADDD5DD1B6BB0B426941D7C674D6E00C1C558948083D488EAF02FC78E93A432E7CA4F72FC8DFE980F6571EDFFFD7A820A776B5BC7BED038F955241CD2519FAA2B5B27AC3059C1159BDB3B196B3065F137B5078F1EF16B0927CE5E3C71E602D39826C341897D97836E7AB9711653B261A5B3BB87392DC20AA911AB4B4BBF6DF837FA967A1255BB63BF9F62350D8F3C44A838480D39D3512F1C79294599A85690A77774F731CCFD1B75B8FCA6F2AB0B0DCDED08424555AD57E2209A1E818141A794D4A43490AAFFC2E5CA2BD575BC25C42FFAFCD87FBC274B0C3D7FE90A954DD31A27EDD0D036E4E9641FD74F9DBBC4C2697EE4E827B1B6CE9E7317AFD0F790D70CB880450E8E3096EBFBFDE4D9D9F9457B23F927D960F85A53779DEE838BC39DBC01477E74CB828612EFE5FEA85FCDCE2DC2067C081C9CC722C0C1E7AEEE9E3F4E9DE3F714C8087F423B76FC342B2BC1C141188C6C0FA3384E00B657DE935F6FFCE13F12A743E2DBE33C417A7A494930A6AC6AEA1A7FF8CE17EBE0C8E804A58FCEAE6E2738D8EAE8EA3E7DFE52FFD02871E7E734862FBFFCE7383838E233D6D1C9BAC2EEFFFC7E8A1F3AFA391151AF9195A6965627383A3ABB28CCFCE39FC778ADB0C43BED3FFC5757ABEB592301285DED584727CB1A8E1D3F53E285F69FE1ABF6AE5EB2B8004A8707A5A6AEFEFCE5AB3F43CF4BF491D2144989030E22B15FCCC8DB88D79BF56B083FADB130E5DFBF9D706D1E948ED6F60E424F674FFF4F0B873A4EC1E81FBF1C7381261DD4A328F6520DFFC941A1FBFFFAEDE4FF00F431C075C14CCD790000000049454E44AE426082");

            var offer = new TravelOffer()
                            {
                                BoardType = GetRandomBool() ? "Vollpension" : "Halbpension",
                                DayCount = GetRandomInteger(1, 14),
                                HotelName = "Hotel " + i,
                                Place = "Place " + 1,
                                PricePerPerson = GetRandomInteger(50, 1000),
                                TravelType = travelType[GetRandomInteger(0, travelType.Count() - 1)],
                                HotelRating = GetRandomInteger(1,5),
                                CountryId = GetRandomInteger(1, _context.CountrySet.Count()),
                                Image = img
                            };

            var count = GetRandomInteger(0, 4);
            for (int j = 0; j < count; j++)
            {
                offer.ExtendedInformation.Add(CreateExtendedInfo(j));
            }

        }

        private ExtendedInformation CreateExtendedInfo(int j)
        {
            string info = "leer";
            switch (GetRandomInteger(1, 3))
            {
                case 1:
                     info = "Dies ist ein laaaaaaaaaaaaaaaaanger teeeeext " + j;
                    break;
                case 2:
                    info = "Mittel langer text " + j;
                    break;
                case 3:
                    info = "kurz " + j;
                    break;
            }
            return new ExtendedInformation(){Information = info};
        }

        private void SaveChanges()
        {
            using (var transaction = new TransactionScope())
            {
                try
                {
                    _context.SaveChanges();
                    transaction.Complete();
                }
                catch (Exception ex)
                {
                    transaction.Dispose();
                    Console.WriteLine(ex.ToString());
                    Console.WriteLine("Error in entry. Start db rollback");
                }
            }
        }

        private void Flush_DB()
        {
            using (var context = new Model1Container())
            {
                if (context.Database.Exists())
                {
                    context.Database.ExecuteSqlCommand("alter database " + context.Database.Connection.Database + " set SINGLE_USER WITH ROLLBACK IMMEDIATE");
                    context.Database.Delete();
                }
                context.Database.CreateIfNotExists();
            }
        }

        public static byte[] StringToByteArray(String hex)
        {
            int NumberChars = hex.Length;
            var bytes = new byte[NumberChars / 2];
            for (int i = 0; i < NumberChars; i += 2)
                bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
            return bytes;
        }

        private int GetRandomInteger(int min, int max)
        {
            return _random.Next(min, max + 1);
        }

        private bool GetRandomBool()
        {
            return GetRandomInteger(0, 1) == 0 ? true : false;
        }

        private DateTime GetRandomDate()
        {
            var start = new DateTime(1995, 1, 1);

            var range = ((TimeSpan)(DateTime.Today - start)).Days;
            return start.AddDays(_random.Next(range));
        }

        private DateTime GetRandomDate(int startYear, int endYear)
        {
            var start = new DateTime(startYear, 1, 1);
            var end = new DateTime(endYear, 12, 31);

            var range = ((TimeSpan)(end - start)).Days;
            return start.AddDays(_random.Next(range));
        }
    }
}
